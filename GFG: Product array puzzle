class Solution{
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums, int n) {
       
        // without using division is also easy
        // we can simply use prefix multiplication
        
        vector<long long int>forw(nums.size());
        vector<long long int>back(nums.size());
        
        long long int prod = 1;
        for(int i = 0 ; i<nums.size(); i++){
            prod *= nums[i];
            forw[i] = prod;
        }
        
        prod = 1; 
        for(int i = nums.size()-1; i>=0 ; i--){
            prod *= nums[i];
            back[i] = prod;
        }
        
        vector<long long int>ans(nums.size());
        if(ans.size() == 1){
            ans[0] = 1; 
            return ans;
        }
        
        ans[0] = back[1];
        if(nums.size() > 1) ans[nums.size()-1] = forw[nums.size()-2];
        
        for(int i = 1 ; i<nums.size()-1; i++){
            ans[i] = forw[i-1] * back[i+1];
        }
        
        return ans;
        
    }
};
