/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    bool check(TreeNode* root , TreeNode* subr){
        if((root == NULL && subr != NULL) || (root != NULL && subr == NULL))return false;
        if(root == NULL && subr == NULL)return true;

        if(root->val == subr->val){
            return check(root->left, subr->left) && check(root->right , subr->right);
        }
        else return false;
    }

    bool dfs_root(TreeNode* root, TreeNode* subRoot){

        if(root == NULL)return false;

        if(root->val == subRoot->val){
            if(check(root, subRoot)) return true ;
        }

        return dfs_root(root->left , subRoot) || dfs_root(root->right , subRoot);
        
    }

    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(root->val == subRoot->val){
            if(root->left == NULL && root->right == NULL && subRoot->left == NULL && subRoot->right == NULL)return true;
        }
        return dfs_root(root , subRoot);
    }
};
